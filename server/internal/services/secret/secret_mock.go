// Code generated by MockGen. DO NOT EDIT.
// Source: secret.go

// Package secret is a generated GoMock package.
package secret

import (
	entity "RedWood011/server/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecretRepo is a mock of SecretRepo interface.
type MockSecretRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSecretRepoMockRecorder
}

// MockSecretRepoMockRecorder is the mock recorder for MockSecretRepo.
type MockSecretRepoMockRecorder struct {
	mock *MockSecretRepo
}

// NewMockSecretRepo creates a new mock instance.
func NewMockSecretRepo(ctrl *gomock.Controller) *MockSecretRepo {
	mock := &MockSecretRepo{ctrl: ctrl}
	mock.recorder = &MockSecretRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretRepo) EXPECT() *MockSecretRepoMockRecorder {
	return m.recorder
}

// DeleteSecret mocks base method.
func (m *MockSecretRepo) DeleteSecret(ctx context.Context, secretID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, secretID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretRepoMockRecorder) DeleteSecret(ctx, secretID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretRepo)(nil).DeleteSecret), ctx, secretID, userID)
}

// ListSecrets mocks base method.
func (m *MockSecretRepo) ListSecrets(ctx context.Context, userID string) ([]entity.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", ctx, userID)
	ret0, _ := ret[0].([]entity.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockSecretRepoMockRecorder) ListSecrets(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockSecretRepo)(nil).ListSecrets), ctx, userID)
}

// SaveSecret mocks base method.
func (m *MockSecretRepo) SaveSecret(ctx context.Context, secret *entity.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecret", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSecret indicates an expected call of SaveSecret.
func (mr *MockSecretRepoMockRecorder) SaveSecret(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecret", reflect.TypeOf((*MockSecretRepo)(nil).SaveSecret), ctx, secret)
}
